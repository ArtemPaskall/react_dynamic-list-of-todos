{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onSelect","selectedUserId","useState","query","setQuery","selectItems","setSelectItems","visibleTodos","setVisibleTodos","useEffect","temporaryTodos","filter","todo","title","includes","toLocaleLowerCase","item","completed","className","htmlFor","type","id","value","onChange","event","target","map","classNames","checked","userId","onClick","API_URL","CurrentUser","clearUser","user","setUser","fetch","then","respons","json","userFromServer","name","email","phone","App","setTodos","setSelectedUserId","todosFromServer","userID","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8aa5b475.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  onSelect: (userID: number) => void;\n  selectedUserId: number;\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, onSelect, selectedUserId }) => {\n  const [query, setQuery] = useState('');\n  const [selectItems, setSelectItems] = useState('');\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    let temporaryTodos = todos.filter(todo => (todo.title.includes(query.toLocaleLowerCase())));\n\n    if (selectItems === 'Completed') {\n      temporaryTodos = temporaryTodos.filter(item => (item.completed === true));\n    }\n\n    if (selectItems === 'Active') {\n      temporaryTodos = temporaryTodos.filter(item => (item.completed === false));\n    }\n\n    setVisibleTodos(temporaryTodos);\n  }, [todos, query, selectItems]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <label htmlFor=\"search\">\n        Search by title\n        <input\n          type=\"text\"\n          id=\"search\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n      </label>\n      <select\n        value={selectItems}\n        onChange={(event) => setSelectItems(event.target.value)}\n      >\n        <option value=\"All\">All</option>\n        <option value=\"Active\">Active</option>\n        <option value=\"Completed\">Completed</option>\n      </select>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {visibleTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames('TodoList__item',\n                { 'TodoList__item--unchecked': todo.completed === false },\n                { 'TodoList__item--checked': todo.completed === true })}\n            >\n              <label htmlFor={`${todo.id}`}>\n                <input\n                  type=\"checkbox\"\n                  id={`${todo.id}`}\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={classNames(\n                  'TodoList__user-button',\n                  { 'TodoList__user-button--selected': todo.userId === selectedUserId },\n                  'button',\n                )}\n                type=\"button\"\n                onClick={() => onSelect(todo.userId)}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n        {/* <ul className=\"TodoList__list\">\n          <li className=\"TodoList__item TodoList__item--unchecked\">\n            <label htmlFor=\"user2\">\n              <input type=\"checkbox\" id=\"user2\" readOnly />\n              <p>delectus aut autem</p>\n            </label>\n\n            <button\n              className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n              type=\"button\"\n            >\n              User&nbsp;#1\n            </button>\n          </li>\n\n          <li className=\"TodoList__item TodoList__item--checked\">\n            <label htmlFor=\"user2\">\n              <input type=\"checkbox\" id=\"user2\" checked readOnly />\n              <p>distinctio vitae autem nihil ut molestias quo</p>\n            </label>\n\n            <button\n              className=\"TodoList__user-button button\"\n              type=\"button\"\n            >\n              User&nbsp;#2\n            </button>\n          </li>\n        </ul> */}\n      </div>\n    </div>\n  );\n};\n","// eslint-disable-next-line\nconst API_URL = `https://mate.academy/students-api`;\n\nexport const getTodos = () => {\n  return fetch(`${API_URL}/todos`)\n    .then(respons => respons.json());\n};\n\nexport const getUsers = (id: number): Promise<User> => {\n  return fetch(`${API_URL}/users/${id}`)\n    .then(respons => respons.json());\n};\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { getUsers } from '../../api';\n\ntype Props = {\n  userId: number;\n  clearUser: () => void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, clearUser }) => {\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    getUsers(userId)\n      .then(userFromServer => setUser(userFromServer));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:\n          {' '}\n          {user?.id}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n      <button\n        type=\"button\"\n        className=\"CurrentUser__clear\"\n        onClick={clearUser}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  // const [visibleTodos, setVisibleTodos] = useState<Todo[]>(todos);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  // const [query, setQuery] = useState('');\n  // const [selectItems, setSelectItems] = useState('');\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => setTodos(todosFromServer));\n  }, []);\n\n  // let visibleTodos = todos.filter(todo => (todo.title.includes(query.toLocaleLowerCase())));\n\n  // if (selectItems === 'Completed') {\n  //   visibleTodos = visibleTodos.filter(item => (item.completed === true));\n  // }\n\n  // if (selectItems === 'Active') {\n  //   visibleTodos = visibleTodos.filter(item => (item.completed === false));\n  // }\n\n  // useEffect(() => {\n  //   setVisibleTodos(todos.filter(todo => (todo.title.includes(query.toLocaleLowerCase()))));\n  // }, [query]);\n\n  return (\n    <div className=\"App\">\n      {/* <label htmlFor=\"search\">\n        Search by title\n        <input\n          type=\"text\"\n          id=\"search\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n      </label>\n      <select\n        value={selectItems}\n        onChange={(event) => setSelectItems(event.target.value)}\n      >\n        <option value=\"All\">All</option>\n        <option value=\"Active\">Active</option>\n        <option value=\"Completed\">Completed</option>\n      </select> */}\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectedUserId={selectedUserId}\n          onSelect={(userID: number) => {\n            setSelectedUserId(userID);\n          }}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clearUser={() => setSelectedUserId(0)}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}